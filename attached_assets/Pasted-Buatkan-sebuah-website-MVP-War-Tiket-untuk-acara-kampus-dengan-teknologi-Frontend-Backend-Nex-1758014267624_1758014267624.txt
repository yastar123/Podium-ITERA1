Buatkan sebuah website MVP War Tiket untuk acara kampus dengan teknologi:

Frontend + Backend: Next.js (TypeScript)

UI: TailwindCSS + shadcn/ui (opsional)

Database: PostgreSQL (pakai Prisma atau Drizzle ORM)

Cache: Redis (Upstash, pakai @upstash/redis)

üéØ Fitur MVP yang harus ada
üë®‚Äçüéì Mahasiswa (User)

Login (pakai akun student ‚Üí untuk MVP cukup pakai email & password biasa).

Ambil tiket (kuota terbatas per batch, misalnya 200 tiket).

Setelah berhasil ambil tiket, sistem generate kode tiket unik (gunakan nanoid atau uuid).

Tampilkan tiket dalam bentuk string unik + QR Code/Barcode (gunakan qrcode.react atau react-barcode).

User bisa lihat status tiket (aktif / tidak valid).

üõ°Ô∏è Panitia (Admin)

Login admin.

Dashboard daftar peserta yang sudah dapat tiket (nama, email/NIM, kode tiket, status hadir).

Validasi tiket:

Bisa scan QR Code via kamera laptop/HP (react-qr-barcode-scanner).

Bisa input kode tiket manual untuk verifikasi.

Update status tiket (misalnya "sudah hadir").

Export daftar peserta ke Excel/CSV (xlsx).

‚öôÔ∏è Sistem

Redis digunakan untuk atomic counter agar tiket tidak melebihi kuota.

Drop tiket bisa diatur per batch (contoh: 200 tiket setiap 3 hari).

Satu akun hanya bisa ambil 1 tiket.

üì¶ Library yang harus digunakan

tailwindcss ‚Üí styling.

qrcode.react + react-barcode ‚Üí generate QR dan barcode.

nanoid ‚Üí kode tiket unik.

@upstash/redis ‚Üí limit kuota tiket.

prisma (atau drizzle-orm) ‚Üí ORM untuk PostgreSQL.

react-qr-barcode-scanner ‚Üí validasi tiket via scan.

xlsx ‚Üí export data peserta.

üìù Output yang saya harapkan

Struktur project Next.js dengan folder FE + API Routes (monolith).

Contoh schema database (user, tiket).

API untuk: login, ambil tiket, cek tiket, validasi tiket.

Halaman sederhana:

Login user.

Dashboard user (ambil tiket, lihat tiket).

Dashboard admin (daftar peserta, validasi tiket).

Implementasi minimal, tapi berfungsi end-to-end.

Fokus pada fungsi dasar (MVP), bukan desain mewah.

Transaction Pooler (untuk Prisma migrations)
DATABASE_URL="postgresql://postgres.vydeqgftrecmppdfybez:efkaweiranafaiejierhawdbawdajwrpwru@aws-1-ap-southeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1"

Session Pooler (untuk direct queries)
DIRECT_URL="postgresql://postgres.vydeqgftrecmppdfybez:efkaweiranafaiejierhawdbawdajwrpwru@aws-1-ap-southeast-1.pooler.supabase.com:5432/postgres"

NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="W6b9+9PPbrAYeqdRn1CcrB+E7cJFzD/eCNwHjPPoBRI="

Supabase
NEXT_PUBLIC_SUPABASE_URL=https://vydeqgftrecmppdfybez.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ5ZGVxZ2Z0cmVjbXBwZGZ5YmV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5ODg3MzIsImV4cCI6MjA3MzU2NDczMn0.Nt6u1c8nWFdjnzI56M77ufrjgYhEnUoHUDXUPqdPt7A

SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ5ZGVxZ2Z0cmVjbXBwZGZ5YmV6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Nzk4ODczMiwiZXhwIjoyMDczNTY0NzMyfQ.QWbWFE51W_1VOIJhuTAvKYzkI5sfBt_HuMJ1hcDOufY