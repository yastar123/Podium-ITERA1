{"file_contents":{"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  typescript: {\n    ignoreBuildErrors: false,\n  },\n  eslint: {\n    ignoreDuringBuilds: false,\n  },\n  images: {\n    domains: ['localhost'],\n  },\n  output: 'standalone',\n  // Allow all hosts for Replit environment\n  async headers() {\n    return [\n      {\n        source: '/api/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'no-cache, no-store, must-revalidate',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nmodule.exports = nextConfig","size_bytes":541},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":81},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n    },\n  },\n  plugins: [],\n}\nexport default config","size_bytes":1559},"src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":1553},"src/app/layout.tsx":{"content":"import type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport SessionProvider from \"@/lib/session-provider\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata: Metadata = {\n  title: \"Ticket War - Campus Event Ticketing\",\n  description: \"MVP ticket system for campus events\",\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <SessionProvider>{children}</SessionProvider>\n      </body>\n    </html>\n  )\n}","size_bytes":586},"src/app/page.tsx":{"content":"export default function Home() {\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-5xl font-bold text-gray-800 mb-4\">\n            üé´ Ticket War MVP\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Sistem Tiket Acara Kampus\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n          <div className=\"bg-white rounded-xl shadow-lg p-8 hover:shadow-xl transition-shadow\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl\">üë®‚Äçüéì</span>\n              </div>\n              <h2 className=\"text-2xl font-semibold text-gray-800 mb-3\">\n                Login Mahasiswa\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                Masuk untuk mengambil tiket acara kampus\n              </p>\n              <a \n                href=\"/auth/signin\" \n                className=\"inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors text-center\"\n              >\n                Masuk sebagai Mahasiswa\n              </a>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-lg p-8 hover:shadow-xl transition-shadow\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl\">üõ°Ô∏è</span>\n              </div>\n              <h2 className=\"text-2xl font-semibold text-gray-800 mb-3\">\n                Panel Admin\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                Kelola acara dan validasi tiket\n              </p>\n              <a \n                href=\"/auth/signin\" \n                className=\"inline-block bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors text-center\"\n              >\n                Masuk sebagai Admin\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-white rounded-lg p-6 inline-block shadow-md\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Status Sistem</h3>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-gray-600\">Database Terhubung</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}","size_bytes":2823},"src/components/TicketValidator.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport dynamic from \"next/dynamic\";\n\n// load scanner hanya di client\nconst QrScanner = dynamic(\n  () => import(\"react-qr-barcode-scanner\").then((mod) => mod.default),\n  { ssr: false }\n);\n\nexport default function TicketValidator() {\n  const [ticketCode, setTicketCode] = useState(\"\");\n  const [scanResult, setScanResult] = useState<string | null>(null);\n  const [status, setStatus] = useState(\"\");\n  const [cameraOn, setCameraOn] = useState(false); // kontrol kamera\n\n  // fungsi validasi tiket\n  const validateTicket = async (code: string) => {\n    if (!code) return;\n    try {\n      const res = await fetch(\"/api/tickets/validate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ ticketCode: code }),\n      });\n\n      const result = await res.json();\n      setStatus(result.message);\n    } catch (err) {\n      console.error(err);\n      setStatus(\"‚ùå Terjadi kesalahan server\");\n    }\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">Validasi Tiket</h1>\n\n      {/* QR Scanner */}\n      <div className=\"border rounded-lg p-2 shadow\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h2 className=\"font-semibold\">Scan QR</h2>\n          <button\n            onClick={() => setCameraOn((prev) => !prev)}\n            className={`px-3 py-1 rounded text-white ${\n              cameraOn ? \"bg-red-600\" : \"bg-green-600\"\n            }`}\n          >\n            {cameraOn ? \"Matikan Kamera\" : \"Nyalakan Kamera\"}\n          </button>\n        </div>\n\n        {cameraOn && (\n          <QrScanner\n            onUpdate={(err, result) => {\n              if (!!result) {\n                const code = result.getText();\n                setScanResult(code);\n                validateTicket(code);\n              }\n            }}\n            width={500}\n            height={300}\n          />\n        )}\n\n        {scanResult && (\n          <p className=\"mt-2 text-sm text-gray-600\">Kode: {scanResult}</p>\n        )}\n      </div>\n\n      {/* Input Manual */}\n      <div className=\"border rounded-lg p-4 shadow\">\n        <h2 className=\"font-semibold mb-2\">Input Manual</h2>\n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            value={ticketCode}\n            onChange={(e) => setTicketCode(e.target.value)}\n            placeholder=\"Masukkan kode tiket\"\n            className=\"flex-1 border p-2 rounded\"\n          />\n          <button\n            onClick={() => validateTicket(ticketCode)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n          >\n            Cek\n          </button>\n        </div>\n      </div>\n\n      {/* Status Validasi */}\n      {status && (\n        <div\n          className={`mt-4 p-3 rounded-lg border font-bold text-center ${\n            status.includes(\"‚úÖ\")\n              ? \"bg-green-100 text-green-700\"\n              : status.includes(\"‚ö†Ô∏è\")\n              ? \"bg-yellow-100 text-yellow-700\"\n              : \"bg-red-100 text-red-700\"\n          }`}\n        >\n          {status}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3168},"src/components/ticket-qr.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { QRCodeSVG } from \"qrcode.react\"\n\ninterface TicketQRProps {\n  ticket: {\n    id: string\n    ticketCode: string\n    user: {\n      name: string\n      email: string\n      nim: string | null\n    }\n    event: {\n      name: string\n      location: string | null\n      eventDate: string\n    }\n  }\n  onClose: () => void\n}\n\nexport default function TicketQR({ ticket, onClose }: TicketQRProps) {\n  const [showDetails, setShowDetails] = useState(false)\n\n  // Create QR data with ticket information\n  const qrData = JSON.stringify({\n    ticketCode: ticket.ticketCode,\n    ticketId: ticket.id,\n    eventName: ticket.event.name,\n    userName: ticket.user.name,\n    timestamp: new Date().toISOString()\n  })\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full p-6\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">üé´ Tiket Digital</h2>\n          <p className=\"text-gray-600 mb-6\">{ticket.event.name}</p>\n          \n          {/* QR Code */}\n          <div className=\"bg-gray-50 p-4 rounded-lg mb-6 flex justify-center\">\n            <QRCodeSVG\n              value={qrData}\n              size={200}\n              level=\"M\"\n              includeMargin={true}\n            />\n          </div>\n          \n          {/* Ticket Code */}\n          <div className=\"mb-6\">\n            <p className=\"text-sm text-gray-600 mb-1\">Kode Tiket</p>\n            <p className=\"text-2xl font-mono font-bold text-blue-600 bg-blue-50 py-2 px-4 rounded-lg\">\n              {ticket.ticketCode}\n            </p>\n          </div>\n          \n          {/* Toggle Details */}\n          <button\n            onClick={() => setShowDetails(!showDetails)}\n            className=\"text-blue-600 hover:text-blue-800 text-sm mb-4\"\n          >\n            {showDetails ? \"Sembunyikan Detail\" : \"Tampilkan Detail\"}\n          </button>\n          \n          {/* Event Details */}\n          {showDetails && (\n            <div className=\"text-left bg-gray-50 p-4 rounded-lg mb-6 space-y-2 text-sm\">\n              <div>\n                <span className=\"font-medium text-gray-700\">Nama:</span>\n                <span className=\"ml-2 text-gray-600\">{ticket.user.name}</span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Email:</span>\n                <span className=\"ml-2 text-gray-600\">{ticket.user.email}</span>\n              </div>\n              {ticket.user.nim && (\n                <div>\n                  <span className=\"font-medium text-gray-700\">NIM:</span>\n                  <span className=\"ml-2 text-gray-600\">{ticket.user.nim}</span>\n                </div>\n              )}\n              <div>\n                <span className=\"font-medium text-gray-700\">Lokasi:</span>\n                <span className=\"ml-2 text-gray-600\">{ticket.event.location || \"TBA\"}</span>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-700\">Tanggal:</span>\n                <span className=\"ml-2 text-gray-600\">\n                  {new Date(ticket.event.eventDate).toLocaleDateString(\"id-ID\", {\n                    weekday: \"long\",\n                    year: \"numeric\",\n                    month: \"long\",\n                    day: \"numeric\",\n                    hour: \"2-digit\",\n                    minute: \"2-digit\"\n                  })}\n                </span>\n              </div>\n            </div>\n          )}\n          \n          {/* Instructions */}\n          <div className=\"text-sm text-gray-600 mb-6 text-left bg-yellow-50 border border-yellow-200 p-3 rounded-lg\">\n            <p className=\"font-medium text-yellow-800 mb-1\">üì± Cara Menggunakan:</p>\n            <ul className=\"text-yellow-700 space-y-1 text-xs\">\n              <li>‚Ä¢ Tunjukkan QR code ini kepada panitia</li>\n              <li>‚Ä¢ Pastikan smartphone dalam kondisi terang</li>\n              <li>‚Ä¢ Simpan screenshot sebagai backup</li>\n              <li>‚Ä¢ Datang 15 menit sebelum acara dimulai</li>\n            </ul>\n          </div>\n          \n          {/* Close Button */}\n          <button\n            onClick={onClose}\n            className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Tutup\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":4474},"src/lib/db.ts":{"content":"// /lib/db.ts or /src/lib/db.ts\n\nimport { PrismaClient } from '@prisma/client'\n\n// Prevent multiple instances of Prisma Client in development\ndeclare global {\n  var prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalThis.prisma ??\n  new PrismaClient({\n    log: ['query', 'error', 'warn'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma\n\n// Test the connection\nprisma.$connect()\n  .then(() => {\n    console.log('‚úÖ Database connected successfully')\n  })\n  .catch((error) => {\n    console.error('‚ùå Database connection failed:', error)\n  })","size_bytes":584},"src/lib/prisma.ts":{"content":"import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: [\"query\", \"error\", \"warn\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n","size_bytes":311},"src/lib/redis.ts":{"content":"import { Redis } from '@upstash/redis'\n\nif (!process.env.UPSTASH_REDIS_REST_URL || !process.env.UPSTASH_REDIS_REST_TOKEN) {\n  throw new Error('Missing Redis configuration')\n}\n\nexport const redis = new Redis({\n  url: process.env.UPSTASH_REDIS_REST_URL!,\n  token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n})","size_bytes":303},"src/lib/seed.ts":{"content":"import { PrismaClient } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // Create admin user\n  const hashedAdminPassword = await bcrypt.hash('admin123', 12)\n  \n  const admin = await prisma.user.upsert({\n    where: { email: 'admin@ticketwar.com' },\n    update: {},\n    create: {\n      email: 'admin@ticketwar.com',\n      name: 'Admin Ticket War',\n      password: hashedAdminPassword,\n      role: 'ADMIN',\n    },\n  })\n\n  // Create sample student\n  const hashedStudentPassword = await bcrypt.hash('student123', 12)\n  \n  const student = await prisma.user.upsert({\n    where: { email: 'student@university.ac.id' },\n    update: {},\n    create: {\n      email: 'student@university.ac.id',\n      name: 'John Doe',\n      nim: '12345678',\n      password: hashedStudentPassword,\n      role: 'STUDENT',\n    },\n  })\n\n  // Create sample events\n  const event1 = await prisma.event.upsert({\n    where: { id: 'sample-tech-talk' },\n    update: {},\n    create: {\n      id: 'sample-tech-talk',\n      name: 'Tech Talk: AI & Machine Learning',\n      description: 'Seminar teknologi tentang AI dan Machine Learning untuk mahasiswa',\n      location: 'Auditorium Utama, Gedung A',\n      eventDate: new Date('2025-10-01T10:00:00Z'),\n      quota: 200,\n      batchSize: 200,\n      isActive: true,\n    },\n  })\n\n  const event2 = await prisma.event.upsert({\n    where: { id: 'sample-workshop' },\n    update: {},\n    create: {\n      id: 'sample-workshop',\n      name: 'Workshop Web Development',\n      description: 'Workshop praktis membuat website dengan React dan Next.js',\n      location: 'Lab Komputer, Gedung B',\n      eventDate: new Date('2025-10-15T14:00:00Z'),\n      quota: 50,\n      batchSize: 50,\n      isActive: true,\n    },\n  })\n\n  const event3 = await prisma.event.upsert({\n    where: { id: 'sample-career-fair' },\n    update: {},\n    create: {\n      id: 'sample-career-fair',\n      name: 'Career Fair 2025',\n      description: 'Pameran karir dan rekrutment untuk mahasiswa tingkat akhir',\n      location: 'Hall Utama Kampus',\n      eventDate: new Date('2025-11-01T09:00:00Z'),\n      quota: 500,\n      batchSize: 500,\n      isActive: true,\n    },\n  })\n\n  console.log('Seeding completed!')\n  console.log('Admin credentials: admin@ticketwar.com / admin123')\n  console.log('Student credentials: student@university.ac.id / student123')\n  console.log(`Created events: ${event1.name}, ${event2.name}, ${event3.name}`)\n}\n\nmain()\n  .catch((e) => {\n    console.error(e)\n    process.exit(1)\n  })\n  .finally(async () => {\n    await prisma.$disconnect()\n  })","size_bytes":2592},"src/lib/session-provider.tsx":{"content":"\"use client\"\n\nimport dynamic from \"next/dynamic\"\n\nconst DynamicSessionProvider = dynamic(\n  () => import(\"next-auth/react\").then(m => ({ default: m.SessionProvider })),\n  { ssr: false }\n)\n\nexport default function SessionProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <DynamicSessionProvider>{children}</DynamicSessionProvider>\n}","size_bytes":351},"src/types/next-auth.d.ts":{"content":"import NextAuth from \"next-auth\"\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string\n      email: string\n      name: string\n      role: string\n    }\n  }\n\n  interface User {\n    id: string\n    email: string\n    name: string\n    role: string\n  }\n}","size_bytes":274},"src/app/admin/page.tsx":{"content":"\"use client\";\n\nimport { useSession } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { signOut } from \"next-auth/react\";\nimport TicketValidator from \"@/components/TicketValidator\";\n\ninterface Event {\n  id: string;\n  name: string;\n  description: string | null;\n  location: string | null;\n  eventDate: string;\n  quota: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n  _count: {\n    tickets: number;\n  };\n}\n\ninterface TicketBatch {\n  id: string;\n  name: string;\n  quota: number;\n  available: number;\n  startDate: string;\n  endDate: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface EventFormData {\n  name: string;\n  description: string;\n  location: string;\n  eventDate: string;\n  quota: string;\n  claimStartDate: string;\n  claimEndDate: string;\n}\n\ninterface BatchFormData {\n  name: string;\n  quota: string;\n  startDate: string;\n  endDate: string;\n}\n\nexport default function AdminDashboard() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [activeTab, setActiveTab] = useState<\"events\" | \"batches\">(\"events\");\n  const [events, setEvents] = useState<Event[]>([]);\n  const [batches, setBatches] = useState<TicketBatch[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [showCreateBatchForm, setShowCreateBatchForm] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n  const [editingBatch, setEditingBatch] = useState<TicketBatch | null>(null);\n  const [formData, setFormData] = useState<EventFormData>({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    eventDate: \"\",\n    quota: \"\",\n    claimStartDate: \"\",\n    claimEndDate: \"\",\n  });\n  const [batchFormData, setBatchFormData] = useState<BatchFormData>({\n    name: \"\",\n    quota: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n  const [formLoading, setFormLoading] = useState(false);\n\n  useEffect(() => {\n    if (status === \"loading\") return;\n\n    if (!session || session.user.role !== \"ADMIN\") {\n      router.push(\"/auth/signin\");\n      return;\n    }\n\n    fetchEvents();\n    if (activeTab === \"batches\") {\n      fetchBatches();\n    }\n  }, [session, status, router, activeTab]);\n\n  const fetchEvents = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(\"/api/events/admin\");\n\n      if (response.ok) {\n        const data = await response.json();\n        setEvents(data);\n        console.log(\"Loaded events:\", data.length);\n      } else {\n        console.error(\"Failed to fetch events:\", response.status);\n        alert(\"Gagal memuat data events\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      alert(\"Terjadi kesalahan saat memuat data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchBatches = async () => {\n    try {\n      const response = await fetch(\"/api/ticket-batches\");\n\n      if (response.ok) {\n        const data = await response.json();\n        setBatches(data);\n        console.log(\"Loaded batches:\", data.length);\n      } else {\n        console.error(\"Failed to fetch batches:\", response.status);\n        alert(\"Gagal memuat data batch tiket\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching batches:\", error);\n      alert(\"Terjadi kesalahan saat memuat data batch\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      location: \"\",\n      eventDate: \"\",\n      quota: \"\",\n      claimStartDate: \"\",\n      claimEndDate: \"\",\n    });\n    setEditingEvent(null);\n    setShowCreateForm(false);\n  };\n\n  const resetBatchForm = () => {\n    setBatchFormData({\n      name: \"\",\n      quota: \"\",\n      startDate: \"\",\n      endDate: \"\",\n    });\n    setEditingBatch(null);\n    setShowCreateBatchForm(false);\n  };\n\n  const handleCreateEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setFormLoading(true);\n\n    try {\n      const response = await fetch(\"/api/events/admin\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"Event dan batch tiket berhasil dibuat! üéâ\");\n        resetForm();\n        fetchEvents();\n        if (activeTab === \"batches\") {\n          fetchBatches();\n        }\n      } else {\n        alert(data.error || \"Gagal membuat event\");\n      }\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      alert(\"Terjadi kesalahan saat membuat event\");\n    } finally {\n      setFormLoading(false);\n    }\n  };\n\n  const handleCreateBatch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setFormLoading(true);\n\n    try {\n      const response = await fetch(\"/api/ticket-batches\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(batchFormData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"Batch tiket berhasil dibuat! üé´\");\n        resetBatchForm();\n        fetchBatches();\n      } else {\n        alert(data.error || \"Gagal membuat batch tiket\");\n      }\n    } catch (error) {\n      console.error(\"Error creating batch:\", error);\n      alert(\"Terjadi kesalahan saat membuat batch\");\n    } finally {\n      setFormLoading(false);\n    }\n  };\n\n  const handleUpdateEvent = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingEvent) return;\n\n    setFormLoading(true);\n\n    try {\n      const response = await fetch(\"/api/events/admin\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: editingEvent.id,\n          ...formData,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"Event berhasil diupdate! ‚úÖ\");\n        resetForm();\n        fetchEvents();\n        if (activeTab === \"batches\") {\n          fetchBatches();\n        }\n      } else {\n        alert(data.error || \"Gagal mengupdate event\");\n      }\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      alert(\"Terjadi kesalahan saat mengupdate event\");\n    } finally {\n      setFormLoading(false);\n    }\n  };\n\n  const handleUpdateBatch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingBatch) return;\n\n    setFormLoading(true);\n\n    try {\n      const response = await fetch(\"/api/ticket-batches\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: editingBatch.id,\n          ...batchFormData,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"Batch berhasil diupdate! ‚úÖ\");\n        resetBatchForm();\n        fetchBatches();\n      } else {\n        alert(data.error || \"Gagal mengupdate batch\");\n      }\n    } catch (error) {\n      console.error(\"Error updating batch:\", error);\n      alert(\"Terjadi kesalahan saat mengupdate batch\");\n    } finally {\n      setFormLoading(false);\n    }\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    if (\n      !confirm(\n        \"Apakah Anda yakin ingin menghapus event ini? Batch tiket terkait juga akan dihapus.\"\n      )\n    )\n      return;\n\n    try {\n      const response = await fetch(`/api/events/admin?id=${eventId}`, {\n        method: \"DELETE\",\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"Event dan batch tiket berhasil dihapus! üóëÔ∏è\");\n        fetchEvents();\n        if (activeTab === \"batches\") {\n          fetchBatches();\n        }\n      } else {\n        alert(data.error || \"Gagal menghapus event\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      alert(\"Terjadi kesalahan saat menghapus event\");\n    }\n  };\n\n  const handleDeleteBatch = async (batchId: string) => {\n    if (!confirm(\"Apakah Anda yakin ingin menghapus batch ini?\")) return;\n\n    try {\n      const response = await fetch(`/api/ticket-batches?id=${batchId}`, {\n        method: \"DELETE\",\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert(\"Batch berhasil dihapus! üóëÔ∏è\");\n        fetchBatches();\n      } else {\n        alert(data.error || \"Gagal menghapus batch\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting batch:\", error);\n      alert(\"Terjadi kesalahan saat menghapus batch\");\n    }\n  };\n\n  const handleEditEvent = (event: Event) => {\n    setEditingEvent(event);\n\n    // Calculate default claim dates if not set\n    const eventDate = new Date(event.eventDate);\n    const defaultClaimStart = new Date();\n    const defaultClaimEnd = new Date(eventDate.getTime() - 24 * 60 * 60 * 1000); // 1 day before event\n\n    setFormData({\n      name: event.name,\n      description: event.description || \"\",\n      location: event.location || \"\",\n      eventDate: event.eventDate.split(\"T\")[0],\n      quota: event.quota.toString(),\n      claimStartDate: defaultClaimStart.toISOString().split(\"T\")[0],\n      claimEndDate: defaultClaimEnd.toISOString().split(\"T\")[0],\n    });\n    setShowCreateForm(true);\n  };\n\n  const handleEditBatch = (batch: TicketBatch) => {\n    setEditingBatch(batch);\n    setBatchFormData({\n      name: batch.name,\n      quota: batch.quota.toString(),\n      startDate: batch.startDate.split(\"T\")[0],\n      endDate: batch.endDate.split(\"T\")[0],\n    });\n    setShowCreateBatchForm(true);\n  };\n\n  const toggleEventStatus = async (event: Event) => {\n    try {\n      const response = await fetch(\"/api/events/admin\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: event.id,\n          isActive: !event.isActive,\n        }),\n      });\n\n      if (response.ok) {\n        alert(\n          `Event berhasil di${!event.isActive ? \"aktifkan\" : \"nonaktifkan\"}!`\n        );\n        fetchEvents();\n      } else {\n        alert(\"Gagal mengubah status event\");\n      }\n    } catch (error) {\n      console.error(\"Error toggling event status:\", error);\n      alert(\"Terjadi kesalahan\");\n    }\n  };\n\n  const toggleBatchStatus = async (batch: TicketBatch) => {\n    try {\n      const response = await fetch(\"/api/ticket-batches\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          id: batch.id,\n          isActive: !batch.isActive,\n        }),\n      });\n\n      if (response.ok) {\n        alert(\n          `Batch berhasil di${!batch.isActive ? \"aktifkan\" : \"nonaktifkan\"}!`\n        );\n        fetchBatches();\n      } else {\n        alert(\"Gagal mengubah status batch\");\n      }\n    } catch (error) {\n      console.error(\"Error toggling batch status:\", error);\n      alert(\"Terjadi kesalahan\");\n    }\n  };\n\n  if (status === \"loading\" || loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Memuat...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-100\">\n      <nav className=\"bg-white shadow-sm border-b\">\n        <div className=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n          <h1 className=\"text-xl font-bold text-gray-800\">\n            üé´ Admin Dashboard\n          </h1>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-600\">Admin: {session?.user?.name}</span>\n            <button\n              onClick={() => signOut({ callbackUrl: \"/\" })}\n              className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors\"\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Tabs */}\n        <div className=\"flex space-x-1 mb-8\">\n          <button\n            onClick={() => setActiveTab(\"events\")}\n            className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n              activeTab === \"events\"\n                ? \"bg-blue-600 text-white\"\n                : \"bg-white text-gray-600 hover:bg-gray-50\"\n            }`}\n          >\n            üìÖ Manajemen Events\n          </button>\n          <button\n            onClick={() => setActiveTab(\"batches\")}\n            className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n              activeTab === \"batches\"\n                ? \"bg-blue-600 text-white\"\n                : \"bg-white text-gray-600 hover:bg-gray-50\"\n            }`}\n          >\n            üé´ Manajemen Batch Tiket\n          </button>\n        </div>\n\n        {/* Events Tab */}\n        {activeTab === \"events\" && (\n          <>\n            <div className=\"flex justify-between items-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-800\">\n                üìÖ Daftar Events\n              </h2>\n              <button\n                onClick={() => setShowCreateForm(true)}\n                className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium\"\n              >\n                + Tambah Event Baru\n              </button>\n            </div>\n\n            {/* Events List */}\n            {events.length === 0 ? (\n              <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n                <div className=\"text-6xl mb-4\">üìÖ</div>\n                <p className=\"text-gray-600 text-lg\">\n                  Tidak ada event yang tersedia\n                </p>\n                <p className=\"text-gray-500\">\n                  Klik \"Tambah Event Baru\" untuk membuat event pertama\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {events.map((event) => (\n                  <div\n                    key={event.id}\n                    className=\"bg-white rounded-xl shadow-lg p-6\"\n                  >\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <h3 className=\"font-semibold text-lg text-gray-800\">\n                        {event.name}\n                      </h3>\n                      <span\n                        className={`px-3 py-1 rounded-full text-sm font-medium ${\n                          event.isActive\n                            ? \"bg-green-100 text-green-800\"\n                            : \"bg-red-100 text-red-800\"\n                        }`}\n                      >\n                        {event.isActive ? \"Aktif\" : \"Nonaktif\"}\n                      </span>\n                    </div>\n\n                    <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n                      <p>\n                        <strong>Deskripsi:</strong>{\" \"}\n                        {event.description || \"Tidak ada deskripsi\"}\n                      </p>\n                      <p>\n                        <strong>Lokasi:</strong> {event.location || \"TBA\"}\n                      </p>\n                      <p>\n                        <strong>Tanggal Event:</strong>{\" \"}\n                        {new Date(event.eventDate).toLocaleDateString(\"id-ID\")}\n                      </p>\n                      <p>\n                        <strong>Kuota:</strong> {event.quota} peserta\n                      </p>\n                      <p>\n                        <strong>Tiket Terjual:</strong> {event._count.tickets}\n                      </p>\n                      <p>\n                        <strong>Sisa Slot:</strong>{\" \"}\n                        {event.quota - event._count.tickets}\n                      </p>\n\n                      {/* Progress Bar */}\n                      <div className=\"mt-3\">\n                        <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                          <span>Progress</span>\n                          <span>\n                            {Math.round(\n                              (event._count.tickets / event.quota) * 100\n                            )}\n                            %\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                            style={{\n                              width: `${\n                                (event._count.tickets / event.quota) * 100\n                              }%`,\n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={() => handleEditEvent(event)}\n                        className=\"flex-1 bg-blue-600 text-white py-2 px-3 rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n                      >\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => toggleEventStatus(event)}\n                        className={`flex-1 py-2 px-3 rounded-lg transition-colors text-sm ${\n                          event.isActive\n                            ? \"bg-yellow-600 text-white hover:bg-yellow-700\"\n                            : \"bg-green-600 text-white hover:bg-green-700\"\n                        }`}\n                      >\n                        {event.isActive ? \"Nonaktifkan\" : \"Aktifkan\"}\n                      </button>\n                      <button\n                        onClick={() => handleDeleteEvent(event.id)}\n                        className=\"bg-red-600 text-white py-2 px-3 rounded-lg hover:bg-red-700 transition-colors text-sm\"\n                        disabled={event._count.tickets > 0}\n                        title={\n                          event._count.tickets > 0\n                            ? \"Tidak bisa dihapus, ada tiket yang sudah terjual\"\n                            : \"Hapus event\"\n                        }\n                      >\n                        üóëÔ∏è\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </>\n        )}\n\n        <TicketValidator />\n\n        {/* Batches Tab */}\n        {activeTab === \"batches\" && (\n          <>\n            <div className=\"flex justify-between items-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-800\">\n                üé´ Daftar Batch Tiket\n              </h2>\n              <button\n                onClick={() => setShowCreateBatchForm(true)}\n                className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium\"\n              >\n                + Tambah Batch Manual\n              </button>\n            </div>\n\n            {/* Batches List */}\n            {batches.length === 0 ? (\n              <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n                <div className=\"text-6xl mb-4\">üé´</div>\n                <p className=\"text-gray-600 text-lg\">\n                  Tidak ada batch tiket yang tersedia\n                </p>\n                <p className=\"text-gray-500\">\n                  Batch tiket akan otomatis terbuat saat membuat event baru\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {batches.map((batch) => (\n                  <div\n                    key={batch.id}\n                    className=\"bg-white rounded-xl shadow-lg p-6\"\n                  >\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <h3 className=\"font-semibold text-lg text-gray-800\">\n                        {batch.name}\n                      </h3>\n                      <span\n                        className={`px-3 py-1 rounded-full text-sm font-medium ${\n                          batch.isActive\n                            ? \"bg-green-100 text-green-800\"\n                            : \"bg-red-100 text-red-800\"\n                        }`}\n                      >\n                        {batch.isActive ? \"Aktif\" : \"Nonaktif\"}\n                      </span>\n                    </div>\n\n                    <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n                      <p>\n                        <strong>Total Kuota:</strong> {batch.quota} tiket\n                      </p>\n                      <p>\n                        <strong>Tersedia:</strong> {batch.available} tiket\n                      </p>\n                      <p>\n                        <strong>Terjual:</strong>{\" \"}\n                        {batch.quota - batch.available} tiket\n                      </p>\n                      <p>\n                        <strong>Mulai:</strong>{\" \"}\n                        {new Date(batch.startDate).toLocaleDateString(\"id-ID\")}\n                      </p>\n                      <p>\n                        <strong>Berakhir:</strong>{\" \"}\n                        {new Date(batch.endDate).toLocaleDateString(\"id-ID\")}\n                      </p>\n\n                      {/* Status */}\n                      <div className=\"mt-2\">\n                        {new Date() < new Date(batch.startDate) && (\n                          <span className=\"px-2 py-1 bg-yellow-100 text-yellow-800 rounded text-xs\">\n                            üìÖ Belum Dimulai\n                          </span>\n                        )}\n                        {new Date() >= new Date(batch.startDate) &&\n                          new Date() <= new Date(batch.endDate) && (\n                            <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                              üü¢ Sedang Berlangsung\n                            </span>\n                          )}\n                        {new Date() > new Date(batch.endDate) && (\n                          <span className=\"px-2 py-1 bg-gray-100 text-gray-800 rounded text-xs\">\n                            ‚è∞ Sudah Berakhir\n                          </span>\n                        )}\n                      </div>\n\n                      {/* Progress */}\n                      <div className=\"mt-3\">\n                        <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                          <span>Progress</span>\n                          <span>\n                            {Math.round(\n                              ((batch.quota - batch.available) / batch.quota) *\n                                100\n                            )}\n                            %\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                            style={{\n                              width: `${\n                                ((batch.quota - batch.available) /\n                                  batch.quota) *\n                                100\n                              }%`,\n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={() => handleEditBatch(batch)}\n                        className=\"flex-1 bg-blue-600 text-white py-2 px-3 rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n                      >\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => toggleBatchStatus(batch)}\n                        className={`flex-1 py-2 px-3 rounded-lg transition-colors text-sm ${\n                          batch.isActive\n                            ? \"bg-yellow-600 text-white hover:bg-yellow-700\"\n                            : \"bg-green-600 text-white hover:bg-green-700\"\n                        }`}\n                      >\n                        {batch.isActive ? \"Nonaktifkan\" : \"Aktifkan\"}\n                      </button>\n                      <button\n                        onClick={() => handleDeleteBatch(batch.id)}\n                        className=\"bg-red-600 text-white py-2 px-3 rounded-lg hover:bg-red-700 transition-colors text-sm\"\n                        disabled={batch.quota - batch.available > 0}\n                        title={\n                          batch.quota - batch.available > 0\n                            ? \"Tidak bisa dihapus, ada tiket yang sudah terjual\"\n                            : \"Hapus batch\"\n                        }\n                      >\n                        üóëÔ∏è\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </>\n        )}\n\n        {/* Create/Edit Event Form Modal */}\n        {showCreateForm && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-xl shadow-xl max-w-lg w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold text-gray-800\">\n                    {editingEvent ? \"Edit Event\" : \"Tambah Event Baru\"}\n                  </h3>\n                  <button\n                    onClick={resetForm}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  >\n                    ‚úï\n                  </button>\n                </div>\n\n                <form\n                  onSubmit={\n                    editingEvent ? handleUpdateEvent : handleCreateEvent\n                  }\n                >\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Nama Event *\n                      </label>\n                      <input\n                        type=\"text\"\n                        required\n                        value={formData.name}\n                        onChange={(e) =>\n                          setFormData({ ...formData, name: e.target.value })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Masukkan nama event\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Deskripsi\n                      </label>\n                      <textarea\n                        value={formData.description}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            description: e.target.value,\n                          })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        rows={3}\n                        placeholder=\"Masukkan deskripsi event\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Tanggal Event *\n                      </label>\n                      <input\n                        type=\"date\"\n                        required\n                        value={formData.eventDate}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            eventDate: e.target.value,\n                          })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Kuota Peserta *\n                      </label>\n                      <input\n                        type=\"number\"\n                        required\n                        min=\"1\"\n                        value={formData.quota}\n                        onChange={(e) =>\n                          setFormData({ ...formData, quota: e.target.value })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Masukkan jumlah kuota\"\n                      />\n                    </div>\n\n                    {/* NEW SECTION: Periode Claim Tiket */}\n                    <div className=\"border-t pt-4\">\n                      <h4 className=\"font-medium text-gray-800 mb-3 flex items-center\">\n                        üé´ Pengaturan Claim Tiket\n                      </h4>\n\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Mulai Claim *\n                          </label>\n                          <input\n                            type=\"date\"\n                            required\n                            value={formData.claimStartDate}\n                            onChange={(e) =>\n                              setFormData({\n                                ...formData,\n                                claimStartDate: e.target.value,\n                              })\n                            }\n                            className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          />\n                        </div>\n\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Batas Claim *\n                          </label>\n                          <input\n                            type=\"date\"\n                            required\n                            value={formData.claimEndDate}\n                            onChange={(e) =>\n                              setFormData({\n                                ...formData,\n                                claimEndDate: e.target.value,\n                              })\n                            }\n                            className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-3\">\n                        <div className=\"text-blue-700 text-sm\">\n                          <strong>üìã Informasi:</strong>\n                          <ul className=\"mt-1 space-y-1\">\n                            <li>\n                              ‚Ä¢ Batch tiket akan otomatis dibuat dengan kuota\n                              yang sama\n                            </li>\n                            <li>\n                              ‚Ä¢ Mahasiswa hanya bisa claim tiket pada periode\n                              yang ditentukan\n                            </li>\n                            <li>\n                              ‚Ä¢ Setelah batas claim, tiket tidak bisa di-claim\n                              lagi\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3 mt-6\">\n                    <button\n                      type=\"button\"\n                      onClick={resetForm}\n                      className=\"flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors\"\n                    >\n                      Batal\n                    </button>\n                    <button\n                      type=\"submit\"\n                      disabled={formLoading}\n                      className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                    >\n                      {formLoading\n                        ? \"Loading...\"\n                        : editingEvent\n                        ? \"Update Event\"\n                        : \"Buat Event & Batch Tiket\"}\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Create/Edit Batch Form Modal */}\n        {showCreateBatchForm && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-white rounded-xl shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold text-gray-800\">\n                    {editingBatch\n                      ? \"Edit Batch Tiket\"\n                      : \"Tambah Batch Tiket Manual\"}\n                  </h3>\n                  <button\n                    onClick={resetBatchForm}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  >\n                    ‚úï\n                  </button>\n                </div>\n\n                <form\n                  onSubmit={\n                    editingBatch ? handleUpdateBatch : handleCreateBatch\n                  }\n                >\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Nama Batch *\n                      </label>\n                      <input\n                        type=\"text\"\n                        required\n                        value={batchFormData.name}\n                        onChange={(e) =>\n                          setBatchFormData({\n                            ...batchFormData,\n                            name: e.target.value,\n                          })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Contoh: Early Bird, Regular, Last Minute\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Kuota Tiket *\n                      </label>\n                      <input\n                        type=\"number\"\n                        required\n                        min=\"1\"\n                        value={batchFormData.quota}\n                        onChange={(e) =>\n                          setBatchFormData({\n                            ...batchFormData,\n                            quota: e.target.value,\n                          })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        placeholder=\"Masukkan jumlah tiket yang tersedia\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Tanggal Mulai *\n                      </label>\n                      <input\n                        type=\"date\"\n                        required\n                        value={batchFormData.startDate}\n                        onChange={(e) =>\n                          setBatchFormData({\n                            ...batchFormData,\n                            startDate: e.target.value,\n                          })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Tanggal Berakhir *\n                      </label>\n                      <input\n                        type=\"date\"\n                        required\n                        value={batchFormData.endDate}\n                        onChange={(e) =>\n                          setBatchFormData({\n                            ...batchFormData,\n                            endDate: e.target.value,\n                          })\n                        }\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      />\n                    </div>\n\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                      <div className=\"flex items-start\">\n                        <div className=\"text-yellow-600 text-sm\">\n                          <strong>üí° Tips untuk Batch Manual:</strong>\n                          <ul className=\"mt-2 space-y-1\">\n                            <li>\n                              ‚Ä¢ Gunakan untuk membuat periode claim tambahan\n                            </li>\n                            <li>\n                              ‚Ä¢ Pastikan tidak bertumpang tindih dengan batch\n                              otomatis\n                            </li>\n                            <li>\n                              ‚Ä¢ Cocok untuk early bird atau last minute\n                              registration\n                            </li>\n                            <li>\n                              ‚Ä¢ Batch manual tidak terikat dengan event tertentu\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3 mt-6\">\n                    <button\n                      type=\"button\"\n                      onClick={resetBatchForm}\n                      className=\"flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors\"\n                    >\n                      Batal\n                    </button>\n                    <button\n                      type=\"submit\"\n                      disabled={formLoading}\n                      className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n                    >\n                      {formLoading\n                        ? \"Loading...\"\n                        : editingBatch\n                        ? \"Update Batch\"\n                        : \"Buat Batch Manual\"}\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":40038},"src/app/dashboard/page.tsx":{"content":"\"use client\"\n\nimport { useSession } from \"next-auth/react\"\nimport { useRouter } from \"next/navigation\"\nimport { useEffect, useState } from \"react\"\nimport { signOut } from \"next-auth/react\"\nimport TicketQR from \"@/components/ticket-qr\"\n\ninterface Event {\n  id: string\n  name: string\n  description: string | null\n  location: string | null\n  eventDate: string\n  quota: number\n  isActive: boolean\n}\n\ninterface Ticket {\n  id: string\n  ticketCode: string\n  status: string\n  issuedAt: string\n  event: Event\n}\n\nexport default function StudentDashboard() {\n  const { data: session, status } = useSession()\n  const router = useRouter()\n  const [events, setEvents] = useState<Event[]>([])\n  const [userTickets, setUserTickets] = useState<Ticket[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedTicket, setSelectedTicket] = useState<Ticket | null>(null)\n\n  useEffect(() => {\n    if (status === \"loading\") return\n    \n    if (!session || session.user.role !== \"STUDENT\") {\n      router.push(\"/auth/signin\")\n      return\n    }\n\n    fetchData()\n  }, [session, status, router])\n\n  const fetchData = async () => {\n    try {\n      // Fetch available events and user tickets\n      const [eventsRes, ticketsRes] = await Promise.all([\n        fetch(\"/api/events\"),\n        fetch(\"/api/tickets/my-tickets\")\n      ])\n\n      if (eventsRes.ok) {\n        const eventsData = await eventsRes.json()\n        setEvents(eventsData)\n      }\n\n      if (ticketsRes.ok) {\n        const ticketsData = await ticketsRes.json()\n        setUserTickets(ticketsData)\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const claimTicket = async (eventId: string) => {\n    try {\n      const response = await fetch(\"/api/tickets/claim\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ eventId }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        alert(\"Tiket berhasil diklaim! üéâ\")\n        fetchData() // Refresh data\n      } else {\n        alert(data.error || \"Gagal mengklaim tiket\")\n      }\n    } catch (error) {\n      console.error(\"Error claiming ticket:\", error)\n      alert(\"Terjadi kesalahan saat mengklaim tiket\")\n    }\n  }\n\n  if (status === \"loading\" || loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Memuat...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <nav className=\"bg-white shadow-sm border-b\">\n        <div className=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n          <h1 className=\"text-xl font-bold text-gray-800\">üé´ Dashboard Mahasiswa</h1>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-600\">Halo, {session?.user?.name}</span>\n            <button\n              onClick={() => signOut({ callbackUrl: \"/\" })}\n              className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors\"\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* My Tickets Section */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">üéüÔ∏è Tiket Saya</h2>\n          {userTickets.length === 0 ? (\n            <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n              <div className=\"text-6xl mb-4\">üé´</div>\n              <p className=\"text-gray-600 text-lg\">Anda belum memiliki tiket</p>\n              <p className=\"text-gray-500\">Klaim tiket di bagian \"Acara Tersedia\" di bawah</p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {userTickets.map((ticket) => (\n                <div key={ticket.id} className=\"bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-lg text-gray-800\">{ticket.event.name}</h3>\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                      ticket.status === \"ACTIVE\" \n                        ? \"bg-green-100 text-green-800\" \n                        : \"bg-gray-100 text-gray-800\"\n                    }`}>\n                      {ticket.status === \"ACTIVE\" ? \"Aktif\" : ticket.status}\n                    </span>\n                  </div>\n                  <div className=\"space-y-2 text-sm text-gray-600\">\n                    <p><strong>Kode Tiket:</strong> {ticket.ticketCode}</p>\n                    <p><strong>Lokasi:</strong> {ticket.event.location}</p>\n                    <p><strong>Tanggal:</strong> {new Date(ticket.event.eventDate).toLocaleDateString(\"id-ID\")}</p>\n                    <p><strong>Diklaim:</strong> {new Date(ticket.issuedAt).toLocaleDateString(\"id-ID\")}</p>\n                  </div>\n                  <button \n                    onClick={() => setSelectedTicket(ticket)}\n                    className=\"w-full mt-4 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    Lihat QR Code\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Available Events Section */}\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">üìÖ Acara Tersedia</h2>\n          {events.length === 0 ? (\n            <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n              <div className=\"text-6xl mb-4\">üìÖ</div>\n              <p className=\"text-gray-600 text-lg\">Tidak ada acara yang tersedia saat ini</p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {events.map((event) => {\n                const hasTicket = userTickets.some(ticket => ticket.event.id === event.id)\n                \n                return (\n                  <div key={event.id} className=\"bg-white rounded-xl shadow-lg p-6\">\n                    <h3 className=\"font-semibold text-lg text-gray-800 mb-3\">{event.name}</h3>\n                    <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n                      <p><strong>Deskripsi:</strong> {event.description || \"Tidak ada deskripsi\"}</p>\n                      <p><strong>Lokasi:</strong> {event.location || \"TBA\"}</p>\n                      <p><strong>Tanggal:</strong> {new Date(event.eventDate).toLocaleDateString(\"id-ID\")}</p>\n                      <p><strong>Kuota:</strong> {event.quota} tiket</p>\n                    </div>\n                    \n                    {hasTicket ? (\n                      <button \n                        disabled \n                        className=\"w-full bg-gray-300 text-gray-500 py-2 rounded-lg cursor-not-allowed\"\n                      >\n                        Sudah Memiliki Tiket\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => claimTicket(event.id)}\n                        className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors\"\n                      >\n                        Klaim Tiket\n                      </button>\n                    )}\n                  </div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* QR Code Modal */}\n      {selectedTicket && (\n        <TicketQR\n          ticket={selectedTicket}\n          onClose={() => setSelectedTicket(null)}\n        />\n      )}\n    </div>\n  )\n}","size_bytes":8037},"src/app/api/events/route.ts":{"content":"import { NextResponse } from \"next/server\"\nimport { prisma } from \"@/lib/db\"\n\nexport async function GET() {\n  try {\n    console.log('Fetching events for student dashboard...')\n    \n    const events = await prisma.event.findMany({\n      where: {\n        isActive: true,\n        eventDate: {\n          gte: new Date() // Only future events\n        }\n      },\n      include: {\n        _count: {\n          select: {\n            tickets: true\n          }\n        }\n      },\n      orderBy: {\n        eventDate: \"asc\"\n      }\n    })\n\n    console.log(`Found ${events.length} active events for students`)\n    \n    // Add available slots calculation\n    const eventsWithAvailability = events.map(event => ({\n      ...event,\n      availableSlots: event.quota - event._count.tickets,\n      isFull: event._count.tickets >= event.quota\n    }))\n\n    return NextResponse.json(eventsWithAvailability)\n    \n  } catch (error) {\n    console.error(\"Error fetching events:\", error)\n    return NextResponse.json(\n      { error: \"Failed to fetch events\" },\n      { status: 500 }\n    )\n  }\n}","size_bytes":1066},"src/app/api/ticket-batches/route.ts":{"content":"// src/app/api/ticket-batches/route.ts\nimport { NextRequest, NextResponse } from \"next/server\"\nimport { getServerSession } from \"next-auth\"\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\"\nimport { prisma } from \"@/lib/db\"\nimport { nanoid } from \"nanoid\" // Import nanoid for ID generation\n\n// GET - Fetch all ticket batches\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const batches = await prisma.ticket_batches.findMany({\n      orderBy: { createdAt: 'desc' }\n    })\n\n    return NextResponse.json(batches)\n  } catch (error) {\n    console.error(\"Error fetching ticket batches:\", error)\n    return NextResponse.json(\n      { error: \"Failed to fetch ticket batches\" },\n      { status: 500 }\n    )\n  }\n}\n\n// POST - Create new ticket batch\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const { name, quota, startDate, endDate } = await request.json()\n\n    if (!name || !quota || !startDate || !endDate) {\n      return NextResponse.json(\n        { error: \"All fields are required: name, quota, startDate, endDate\" },\n        { status: 400 }\n      )\n    }\n\n    // Validate dates\n    const start = new Date(startDate)\n    const end = new Date(endDate)\n\n    if (start >= end) {\n      return NextResponse.json(\n        { error: \"Start date must be earlier than end date\" },\n        { status: 400 }\n      )\n    }\n\n    // FIXED: Generate ID for ticket batch\n    const batchId = nanoid() // or use crypto.randomUUID() if available\n\n    const newBatch = await prisma.ticket_batches.create({\n      data: {\n        id: batchId, // ‚úÖ FIXED: Add the missing ID\n        name,\n        quota: parseInt(quota),\n        available: parseInt(quota), // Initially all tickets are available\n        startDate: new Date(startDate),\n        endDate: new Date(endDate),\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    })\n\n    return NextResponse.json(newBatch)\n  } catch (error) {\n    console.error(\"Error creating ticket batch:\", error)\n    return NextResponse.json(\n      { error: \"Failed to create ticket batch\" },\n      { status: 500 }\n    )\n  }\n}\n\n// PUT - Update ticket batch\nexport async function PUT(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const { id, name, quota, startDate, endDate, isActive } = await request.json()\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Batch ID is required\" },\n        { status: 400 }\n      )\n    }\n\n    // Get current batch to calculate available tickets\n    const currentBatch = await prisma.ticket_batches.findUnique({\n      where: { id }\n    })\n\n    if (!currentBatch) {\n      return NextResponse.json(\n        { error: \"Batch not found\" },\n        { status: 404 }\n      )\n    }\n\n    // Calculate new available count if quota changed\n    let newAvailable = currentBatch.available\n    if (quota && parseInt(quota) !== currentBatch.quota) {\n      const usedTickets = currentBatch.quota - currentBatch.available\n      newAvailable = parseInt(quota) - usedTickets\n      \n      // Ensure available count doesn't go negative\n      if (newAvailable < 0) {\n        return NextResponse.json(\n          { error: \"New quota cannot be less than already sold tickets\" },\n          { status: 400 }\n        )\n      }\n    }\n\n    // Validate dates if provided\n    if (startDate && endDate) {\n      const start = new Date(startDate)\n      const end = new Date(endDate)\n\n      if (start >= end) {\n        return NextResponse.json(\n          { error: \"Start date must be earlier than end date\" },\n          { status: 400 }\n        )\n      }\n    }\n\n    const updatedBatch = await prisma.ticket_batches.update({\n      where: { id },\n      data: {\n        ...(name && { name }),\n        ...(quota && { quota: parseInt(quota), available: newAvailable }),\n        ...(startDate && { startDate: new Date(startDate) }),\n        ...(endDate && { endDate: new Date(endDate) }),\n        ...(isActive !== undefined && { isActive }),\n        updatedAt: new Date(),\n      }\n    })\n\n    return NextResponse.json(updatedBatch)\n  } catch (error) {\n    console.error(\"Error updating ticket batch:\", error)\n    return NextResponse.json(\n      { error: \"Failed to update ticket batch\" },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE - Delete ticket batch\nexport async function DELETE(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get(\"id\")\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Batch ID is required\" },\n        { status: 400 }\n      )\n    }\n\n    // Check if batch has any tickets claimed\n    const ticketCount = await prisma.ticket.count({\n      where: { batchId: id }\n    })\n\n    if (ticketCount > 0) {\n      return NextResponse.json(\n        { error: \"Cannot delete batch with claimed tickets\" },\n        { status: 400 }\n      )\n    }\n\n    await prisma.ticket_batches.delete({\n      where: { id }\n    })\n\n    return NextResponse.json({ message: \"Batch deleted successfully\" })\n  } catch (error) {\n    console.error(\"Error deleting ticket batch:\", error)\n    return NextResponse.json(\n      { error: \"Failed to delete ticket batch\" },\n      { status: 500 }\n    )\n  }\n}","size_bytes":6161},"src/app/auth/register/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    nim: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n  const router = useRouter()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Password tidak cocok\")\n      setLoading(false)\n      return\n    }\n\n    try {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          email: formData.email,\n          nim: formData.nim,\n          password: formData.password,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (response.ok) {\n        setSuccess(\"Akun berhasil dibuat! Silakan login.\")\n        setTimeout(() => {\n          router.push(\"/auth/signin\")\n        }, 2000)\n      } else {\n        setError(data.error || \"Terjadi kesalahan\")\n      }\n    } catch (error) {\n      setError(\"Terjadi kesalahan. Silakan coba lagi.\")\n    }\n\n    setLoading(false)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-xl shadow-lg p-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">üìù Daftar</h1>\n          <p className=\"text-gray-600\">Buat akun Ticket War System</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Nama Lengkap\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"John Doe\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Email\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"mahasiswa@university.ac.id\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"nim\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              NIM (Opsional untuk Admin)\n            </label>\n            <input\n              type=\"text\"\n              id=\"nim\"\n              name=\"nim\"\n              value={formData.nim}\n              onChange={handleChange}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"12345678\"\n            />\n          </div>\n\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n              required\n              minLength={6}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Konfirmasi Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              value={formData.confirmPassword}\n              onChange={handleChange}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n              required\n              minLength={6}\n            />\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\n              {error}\n            </div>\n          )}\n\n          {success && (\n            <div className=\"bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg\">\n              {success}\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {loading ? \"Memproses...\" : \"Daftar\"}\n          </button>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-gray-600\">\n            Sudah punya akun?{\" \"}\n            <Link href=\"/auth/signin\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n              Masuk di sini\n            </Link>\n          </p>\n        </div>\n\n        <div className=\"mt-4 text-center\">\n          <Link href=\"/\" className=\"text-gray-500 hover:text-gray-700 text-sm\">\n            ‚Üê Kembali ke Beranda\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":6317},"src/app/auth/signin/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { signIn, getSession } from \"next-auth/react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\n\nexport default function SignIn() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n\n    try {\n      const result = await signIn(\"credentials\", {\n        email,\n        password,\n        redirect: false,\n      })\n\n      if (result?.error) {\n        setError(\"Email atau password salah\")\n      } else {\n        const session = await getSession()\n        if (session?.user?.role === \"ADMIN\") {\n          router.push(\"/admin\")\n        } else {\n          router.push(\"/dashboard\")\n        }\n      }\n    } catch (error) {\n      setError(\"Terjadi kesalahan. Silakan coba lagi.\")\n    }\n\n    setLoading(false)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-xl shadow-lg p-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">üé´ Login</h1>\n          <p className=\"text-gray-600\">Masuk ke Ticket War System</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Email\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"mahasiswa@university.ac.id\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n              required\n            />\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg\">\n              {error}\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {loading ? \"Memproses...\" : \"Masuk\"}\n          </button>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-gray-600\">\n            Belum punya akun?{\" \"}\n            <Link href=\"/auth/register\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n              Daftar di sini\n            </Link>\n          </p>\n        </div>\n\n        <div className=\"mt-4 text-center\">\n          <Link href=\"/\" className=\"text-gray-500 hover:text-gray-700 text-sm\">\n            ‚Üê Kembali ke Beranda\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":3723},"src/app/api/auth/[...nextauth]/route.ts":{"content":"import NextAuth, { NextAuthOptions } from \"next-auth\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\"\nimport { prisma } from \"@/lib/db\"\nimport bcrypt from \"bcryptjs\"\n\nconst authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email\n          }\n        })\n\n        if (!user) {\n          return null\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        )\n\n        if (!isPasswordValid) {\n          return null\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        }\n      }\n    })\n  ],\n  session: {\n    strategy: \"jwt\"\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.sub!\n        session.user.role = token.role as string\n      }\n      return session\n    }\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n}\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }","size_bytes":1699},"src/app/api/auth/register/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\"\nimport { prisma } from \"@/lib/db\"\nimport bcrypt from \"bcryptjs\"\nimport { z } from \"zod\"\n\nconst registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  name: z.string().min(2),\n  nim: z.string().optional()\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const validatedData = registerSchema.parse(body)\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email: validatedData.email }\n    })\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"User already exists\" },\n        { status: 400 }\n      )\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(validatedData.password, 12)\n\n    // Create user (always STUDENT role for public registration)\n    const user = await prisma.user.create({\n      data: {\n        email: validatedData.email,\n        password: hashedPassword,\n        name: validatedData.name,\n        nim: validatedData.nim,\n        role: \"STUDENT\", // Force STUDENT role for security\n      },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        role: true,\n      }\n    })\n\n    return NextResponse.json({\n      message: \"User created successfully\",\n      user\n    })\n  } catch (error) {\n    console.error(\"Registration error:\", error)\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    )\n  }\n}","size_bytes":1531},"src/app/api/events/admin/route.ts":{"content":"// src/app/api/events/admin/route.ts\nimport { NextRequest, NextResponse } from \"next/server\"\nimport { getServerSession } from \"next-auth\"\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\"\nimport { prisma } from \"@/lib/db\"\nimport { nanoid } from \"nanoid\" // Import nanoid for ID generation\n\n// GET - Fetch all events for admin\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const events = await prisma.event.findMany({\n      include: {\n        _count: {\n          select: { tickets: true }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    })\n\n    return NextResponse.json(events)\n  } catch (error) {\n    console.error(\"Error fetching events:\", error)\n    return NextResponse.json(\n      { error: \"Failed to fetch events\" },\n      { status: 500 }\n    )\n  }\n}\n\n// POST - Create new event with automatic batch creation\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const { \n      name, \n      description, \n      location, \n      eventDate, \n      quota,\n      claimStartDate,\n      claimEndDate \n    } = await request.json()\n\n    // Validation\n    if (!name || !eventDate || !quota || !claimStartDate || !claimEndDate) {\n      return NextResponse.json(\n        { error: \"Required fields: name, eventDate, quota, claimStartDate, claimEndDate\" },\n        { status: 400 }\n      )\n    }\n\n    // Validate dates\n    const eventDateTime = new Date(eventDate)\n    const claimStart = new Date(claimStartDate)\n    const claimEnd = new Date(claimEndDate)\n\n    if (claimStart >= claimEnd) {\n      return NextResponse.json(\n        { error: \"Tanggal mulai claim harus lebih awal dari batas claim\" },\n        { status: 400 }\n      )\n    }\n\n    if (claimEnd > eventDateTime) {\n      return NextResponse.json(\n        { error: \"Batas claim tidak boleh melebihi tanggal event\" },\n        { status: 400 }\n      )\n    }\n\n    // Create event and batch in transaction\n    const result = await prisma.$transaction(async (tx) => {\n      // Create the event\n      const newEvent = await tx.event.create({\n        data: {\n          name,\n          description: description || null,\n          location: location || null,\n          eventDate: new Date(eventDate),\n          quota: parseInt(quota),\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }\n      })\n\n      // FIXED: Generate ID for ticket batch\n      const batchId = nanoid() // or use crypto.randomUUID() if available\n\n      // Automatically create a ticket batch for this event\n      const batch = await tx.ticket_batches.create({\n        data: {\n          id: batchId, // ‚úÖ FIXED: Add the missing ID\n          name: `${name} - Batch Utama`,\n          quota: parseInt(quota),\n          available: parseInt(quota),\n          startDate: new Date(claimStartDate),\n          endDate: new Date(claimEndDate),\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }\n      })\n\n      return { event: newEvent, batch }\n    })\n\n    return NextResponse.json({\n      message: \"Event dan batch tiket berhasil dibuat!\",\n      event: result.event,\n      batch: result.batch\n    })\n  } catch (error) {\n    console.error(\"Error creating event:\", error)\n    return NextResponse.json(\n      { error: \"Failed to create event and batch\" },\n      { status: 500 }\n    )\n  }\n}\n\n// PUT - Update event\nexport async function PUT(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const { \n      id, \n      name, \n      description, \n      location, \n      eventDate, \n      quota, \n      isActive,\n      claimStartDate,\n      claimEndDate\n    } = await request.json()\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Event ID is required\" },\n        { status: 400 }\n      )\n    }\n\n    // If updating claim dates, validate them\n    if (claimStartDate && claimEndDate) {\n      const claimStart = new Date(claimStartDate)\n      const claimEnd = new Date(claimEndDate)\n      const eventDateTime = eventDate ? new Date(eventDate) : null\n\n      if (claimStart >= claimEnd) {\n        return NextResponse.json(\n          { error: \"Tanggal mulai claim harus lebih awal dari batas claim\" },\n          { status: 400 }\n        )\n      }\n\n      if (eventDateTime && claimEnd > eventDateTime) {\n        return NextResponse.json(\n          { error: \"Batas claim tidak boleh melebihi tanggal event\" },\n          { status: 400 }\n        )\n      }\n    }\n\n    const result = await prisma.$transaction(async (tx) => {\n      // Update the event\n      const updatedEvent = await tx.event.update({\n        where: { id },\n        data: {\n          ...(name && { name }),\n          ...(description !== undefined && { description: description || null }),\n          ...(location !== undefined && { location: location || null }),\n          ...(eventDate && { eventDate: new Date(eventDate) }),\n          ...(quota && { quota: parseInt(quota) }),\n          ...(isActive !== undefined && { isActive }),\n          updatedAt: new Date(),\n        }\n      })\n\n      // If updating claim dates or quota, update the associated batch\n      if (claimStartDate || claimEndDate || quota) {\n        // Find the main batch for this event (assuming it has the event name in it)\n        const mainBatch = await tx.ticket_batches.findFirst({\n          where: {\n            name: {\n              contains: updatedEvent.name\n            }\n          }\n        })\n\n        if (mainBatch) {\n          // Calculate new available count if quota changed\n          let newAvailable = mainBatch.available\n          if (quota) {\n            const usedTickets = mainBatch.quota - mainBatch.available\n            newAvailable = parseInt(quota) - usedTickets\n            \n            // Ensure available count doesn't go negative\n            if (newAvailable < 0) {\n              throw new Error(\"New quota cannot be less than already sold tickets\")\n            }\n          }\n\n          await tx.ticket_batches.update({\n            where: { id: mainBatch.id },\n            data: {\n              ...(quota && { \n                quota: parseInt(quota),\n                available: newAvailable\n              }),\n              ...(claimStartDate && { startDate: new Date(claimStartDate) }),\n              ...(claimEndDate && { endDate: new Date(claimEndDate) }),\n              updatedAt: new Date(),\n            }\n          })\n        }\n      }\n\n      return updatedEvent\n    })\n\n    return NextResponse.json(result)\n  } catch (error: any) {\n    console.error(\"Error updating event:\", error)\n    \n    // Handle specific error messages\n    if (error.message?.includes(\"New quota cannot be less than already sold tickets\")) {\n      return NextResponse.json(\n        { error: \"Kuota baru tidak boleh lebih kecil dari tiket yang sudah terjual\" },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: \"Failed to update event\" },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE - Delete event and its batch\nexport async function DELETE(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Admin access required\" },\n        { status: 401 }\n      )\n    }\n\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get(\"id\")\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Event ID is required\" },\n        { status: 400 }\n      )\n    }\n\n    // Check if event has any tickets\n    const ticketCount = await prisma.ticket.count({\n      where: { eventId: id }\n    })\n\n    if (ticketCount > 0) {\n      return NextResponse.json(\n        { error: \"Cannot delete event with claimed tickets\" },\n        { status: 400 }\n      )\n    }\n\n    await prisma.$transaction(async (tx) => {\n      // Get event name first\n      const eventToDelete = await tx.event.findUnique({ \n        where: { id },\n        select: { name: true }\n      })\n\n      if (eventToDelete) {\n        // Delete associated batches first\n        await tx.ticket_batches.deleteMany({\n          where: {\n            name: {\n              contains: eventToDelete.name\n            }\n          }\n        })\n      }\n\n      // Then delete the event\n      await tx.event.delete({\n        where: { id }\n      })\n    })\n\n    return NextResponse.json({ message: \"Event and associated batches deleted successfully\" })\n  } catch (error) {\n    console.error(\"Error deleting event:\", error)\n    return NextResponse.json(\n      { error: \"Failed to delete event\" },\n      { status: 500 }\n    )\n  }\n}","size_bytes":9319},"src/app/api/tickets/claim/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\"\nimport { getServerSession } from \"next-auth\"\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\"\nimport { prisma } from \"@/lib/db\"\nimport { nanoid } from \"nanoid\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user || session.user.role !== \"STUDENT\") {\n      return NextResponse.json(\n        { error: \"Unauthorized - Only students can claim tickets\" },\n        { status: 401 }\n      )\n    }\n\n    const { eventId } = await request.json()\n\n    if (!eventId) {\n      return NextResponse.json(\n        { error: \"Event ID is required\" },\n        { status: 400 }\n      )\n    }\n\n    // Check if event exists and is active\n    const event = await prisma.event.findUnique({\n      where: { id: eventId },\n      include: {\n        _count: {\n          select: { tickets: true }\n        }\n      }\n    })\n\n    if (!event) {\n      return NextResponse.json(\n        { error: \"Event not found\" },\n        { status: 404 }\n      )\n    }\n\n    if (!event.isActive) {\n      return NextResponse.json(\n        { error: \"Event is not active\" },\n        { status: 400 }\n      )\n    }\n\n    // Use transaction to prevent race conditions\n    const ticket = await prisma.$transaction(async (tx) => {\n      // Check if user already has a ticket for this event\n      const existingTicket = await tx.ticket.findFirst({\n        where: {\n          userId: session.user.id,\n          eventId: eventId\n        }\n      })\n\n      if (existingTicket) {\n        throw new Error(\"You already have a ticket for this event\")\n      }\n\n      // Find any available ticket batch (tanpa filter eventId)\n      const availableBatch = await tx.ticket_batches.findFirst({\n        where: {\n          isActive: true,\n          startDate: { lte: new Date() },\n          endDate: { gte: new Date() },\n          available: { gt: 0 }\n        },\n        orderBy: { startDate: 'asc' }\n      })\n\n      if (!availableBatch) {\n        throw new Error(\"No available ticket batches at this time\")\n      }\n\n      // Check event quota\n      const currentEvent = await tx.event.findUnique({\n        where: { id: eventId },\n        include: {\n          _count: {\n            select: { tickets: true }\n          }\n        }\n      })\n\n      if (!currentEvent) {\n        throw new Error(\"Event not found\")\n      }\n\n      if (currentEvent._count.tickets >= currentEvent.quota) {\n        throw new Error(\"Sorry, this event is full\")\n      }\n\n      // Generate unique ticket code\n      const ticketCode = nanoid(10).toUpperCase()\n\n      // Create the ticket\n      const newTicket = await tx.ticket.create({\n        data: {\n          ticketCode,\n          userId: session.user.id,\n          eventId: eventId,\n          batchId: availableBatch.id,\n          status: \"ACTIVE\",\n        },\n        include: {\n          event: true,\n          user: {\n            select: {\n              name: true,\n              email: true,\n              nim: true\n            }\n          },\n          ticket_batches: true\n        }\n      })\n\n      // Update available count\n      await tx.ticket_batches.update({\n        where: { id: availableBatch.id },\n        data: { available: { decrement: 1 } }\n      })\n\n      return newTicket\n    })\n\n    return NextResponse.json({\n      message: \"Ticket claimed successfully!\",\n      ticket\n    })\n  } catch (error: any) {\n    console.error(\"Error claiming ticket:\", error)\n    \n    if (error.code === \"P2002\") {\n      return NextResponse.json(\n        { error: \"You already have a ticket for this event\" },\n        { status: 400 }\n      )\n    }\n    \n    if (error.message?.includes(\"already have a ticket\")) {\n      return NextResponse.json(\n        { error: \"You already have a ticket for this event\" },\n        { status: 400 }\n      )\n    }\n    \n    if (error.message?.includes(\"event is full\")) {\n      return NextResponse.json(\n        { error: \"Sorry, this event is full\" },\n        { status: 400 }\n      )\n    }\n\n    if (error.message?.includes(\"Event not found\")) {\n      return NextResponse.json(\n        { error: \"Event not found\" },\n        { status: 404 }\n      )\n    }\n\n    if (error.message?.includes(\"No available ticket batches\")) {\n      return NextResponse.json(\n        { error: \"No available ticket batches at this time\" },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(\n      { error: \"Failed to claim ticket\" },\n      { status: 500 }\n    )\n  }\n}","size_bytes":4504},"src/app/api/tickets/my-tickets/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\"\nimport { getServerSession } from \"next-auth\"\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\"\nimport { prisma } from \"@/lib/db\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions)\n\n    if (!session || !session.user) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      )\n    }\n\n    const userTickets = await prisma.ticket.findMany({\n      where: {\n        userId: session.user.id\n      },\n      include: {\n        event: true,\n        user: {\n          select: {\n            name: true,\n            email: true,\n            nim: true\n          }\n        }\n      },\n      orderBy: {\n        createdAt: \"desc\"\n      }\n    })\n\n    return NextResponse.json(userTickets)\n  } catch (error) {\n    console.error(\"Error fetching user tickets:\", error)\n    return NextResponse.json(\n      { error: \"Failed to fetch tickets\" },\n      { status: 500 }\n    )\n  }\n}","size_bytes":1031},"src/app/api/tickets/validate/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/prisma\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { ticketCode } = await req.json();\n\n    if (!ticketCode) {\n      return NextResponse.json(\n        { success: false, message: \"‚ùå Kode tiket wajib diisi\" },\n        { status: 400 }\n      );\n    }\n\n    const ticket = await prisma.ticket.findUnique({\n      where: { ticketCode },\n    });\n\n    if (!ticket) {\n      return NextResponse.json(\n        { success: false, message: \"‚ùå Tiket tidak ditemukan\" },\n        { status: 404 }\n      );\n    }\n\n    if (ticket.status === \"USED\") {\n      return NextResponse.json(\n        { success: false, message: \"‚ö†Ô∏è Tiket sudah digunakan\" },\n        { status: 400 }\n      );\n    }\n\n    // Update tiket jadi USED\n    await prisma.ticket.update({\n      where: { id: ticket.id },\n      data: {\n        status: \"USED\",\n        attendedAt: new Date(),\n      },\n    });\n\n    return NextResponse.json(\n      { success: true, message: \"‚úÖ Tiket valid dan sudah ditandai digunakan\" },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Validate Ticket Error:\", error);\n    return NextResponse.json(\n      { success: false, message: \"‚ùå Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n","size_bytes":1309}},"version":1}