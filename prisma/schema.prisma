generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String?
  role        Role          @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  nim         String
  password    String
  tickets     Ticket[]
  ticketQueue TicketQueue[]

  @@map("users")
}

model Ticket {
  id             String         @id @default(cuid())
  ticketCode     String         @unique
  status         TicketStatus   @default(ACTIVE)
  userId         String
  batchId        String
  attendedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  eventId        String
  ticket_batches ticket_batches @relation(fields: [batchId], references: [id])
  event          Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model Event {
  id              String        @id @default(cuid())
  name            String
  description     String?
  location        String?
  eventDate       DateTime
  quota           Int
  availableTickets Int          // Atomic counter for available tickets
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tickets         Ticket[]
  ticketQueue     TicketQueue[]

  @@map("events")
}

model ticket_batches {
  id        String   @id @default(cuid())
  name      String
  quota     Int
  available Int
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
  // ‚ùå REMOVED eventId and event relation
}

enum TicketStatus {
  ACTIVE
  USED
  INVALID
}

model TicketQueue {
  id          String      @id @default(cuid())
  userId      String
  eventId     String
  status      QueueStatus @default(PENDING)
  priority    Int         @default(0)
  attempts    Int         @default(0)
  errorMsg    String?
  queuedAt    DateTime    @default(now())
  processedAt DateTime?
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Indexes for efficient querying
  @@index([status, queuedAt])
  @@index([userId, eventId])
  @@unique([userId, eventId]) // Prevent duplicate queue entries per user per event
  @@map("ticket_queue")
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Role {
  USER
  ADMIN
  STUDENT
}